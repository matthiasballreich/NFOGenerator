<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picMain.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYa
        HSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgo
        KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABcAFYDASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD6nqDzIjHuLIYzxnPBpWAZCvqMdcV5P4p8Vax4k8VS+Efh44il
        hYR61rm3fFYf9Mos8GXr9D75wAdr4v8AGXh7wdZifxLqtrYBgTFGeZHA/uKOT+VcK/xdvNSmH/CH+AvE
        muW+A4u5VNrE49VLDmui8L/Dfw74auH1LypNS1qTHm6tqTG4nds9s8L+GK7qREyGkOSOOT61IHkZ+Leq
        QAjxB8OfF2nQ5+ae3h+0JGO5JGOBXU+EPiH4T8VOLfRdZhe+BI+yXH7qfI/6Ztg12vzDocj9a5Xxb4A8
        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
</value>
  </data>
</root>